library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity SequenceLock is
    Port ( clk  : in  STD_LOGIC;
           btnR : in  STD_LOGIC;
           btnL : in  STD_LOGIC;
           sw   : in  STD_LOGIC_VECTOR (3 downto 0);
           led  : out STD_LOGIC_VECTOR (15 downto 0);
           an   : out STD_LOGIC_VECTOR (3 downto 0);
           seg  : out STD_LOGIC_VECTOR (0 to 7));
end SequenceLock;

architecture Behavioral of SequenceLock is
begin
    
    main: process(clk, btnR, btnL, sw)
        variable btnRPrevious      : STD_LOGIC := '1';
        variable btnLPrevious      : STD_LOGIC := '1';
        
        --7SegDisplaySignals
        variable digitToDisplay    : INTEGER range 0 to 3;
        variable displayCounter    : INTEGER range 0 to 24000;
        variable blinkCounter      : INTEGER range 0 to 25000000;
        variable numberToDisplay   : STD_LOGIC_VECTOR (3 downto 0);
        variable displayBlink      : STD_LOGIC := '1';
        
        --CombinationSignals
        variable digitToSave       : INTEGER range 0 to 3 := 3;
        variable combinationValues : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
        variable solved            : STD_LOGIC := '0';
        
        --Constants
        constant combinationSol    : STD_LOGIC_VECTOR(15 downto 0) := X"5AFE";
                                                                --    ABCDEFGIOSTZ
    begin
        if (rising_edge(clk)) then
            -- Increment counters
            displayCounter := displayCounter + 1;
            blinkCounter := blinkCounter + 1;
            
            --Oscillating Blink
            if (blinkCounter = 0) then
                displayBlink := not displayBlink;
            end if;
            
            -- Displaying Combination
            if (displayCounter = 0) then
                digitToDisplay := digitToDisplay + 1;
                case digitToDisplay is
                    when 0 => an <= "1110";
                    when 1 => an <= "1101";
                    when 2 => an <= "1011";
                    when 3 => an <= "0111";
                end case;
                if (solved = '1' and displayBlink = '1') then
                    case digitToDisplay is
                        when 0     => seg <= "10111110";
                        when 1 | 3 => seg <= "10001001";
                        when 2     => seg <= "00010001";
                    end case;
                elsif (solved = '0' and (digitToDisplay > digitToSave or (digitToDisplay = digitToSave and displayBlink = '1'))) then
                    case combinationValues(digitToDisplay * 4 + 3 downto digitToDisplay * 4) is
                        when "0000" => seg <= "00000011";
                        when "0001" => seg <= "10011111";
                        when "0010" => seg <= "00100101";
                        when "0011" => seg <= "00001101";
                        when "0100" => seg <= "10011001";
                        when "0101" => seg <= "01001001";
                        when "0110" => seg <= "01000001";
                        when "0111" => seg <= "00011111";
                        when "1000" => seg <= "00000001";
                        when "1001" => seg <= "00001001";
                        when "1010" => seg <= "00010001";
                        when "1011" => seg <= "11000001";
                        when "1100" => seg <= "01100011";
                        when "1101" => seg <= "10000101";
                        when "1110" => seg <= "01100001";
                        when "1111" => seg <= "01110001";
                    end case;
                else
                    seg <= "11111111";
                end if;
            end if;
            
            -- Submit Button
            if (btnR = '1' and btnRPrevious = '0' and solved = '0') then
                if (digitToSave >= 1) then -- Changing value to save
                    digitToSave := digitToSave - 1;
                    displayBlink := '1';
                    blinkCounter := 0;
                else -- Submitting Combo
                    if (to_integer(unsigned(combinationValues)) = to_integer(unsigned(combinationSol))) then
                        solved := '1';
                    else
                        digitToSave := 3;
                        combinationValues := "0000000000000000";
                    end if;
                end if;
            end if;
            btnRPrevious := btnR;
            
            -- Writing values
            if (digitToSave >= 0 and solved = '0') then
                combinationValues(digitToSave * 4 + 3 downto digitToSave * 4) := sw;
            end if;
            led <= combinationValues;
            
            -- Reset Button
            if (btnL = '1' and btnLPrevious = '0') then
                digitToSave := 3;
                displayBlink := '1';
                blinkCounter := 0;
                solved := '0';
                combinationValues := "0000000000000000";
            end if;
            btnLPrevious := btnL;
        end if;
    end process;
end Behavioral;
